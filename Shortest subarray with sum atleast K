from collections import deque

def shortestSubarrayLength(nums, k):
    length = len(nums)
    prefix_sum = [0] * (length + 1)
    min_subarray_length = float('inf')
    deque_window = deque()

    for i in range(length):
        prefix_sum[i + 1] = prefix_sum[i] + nums[i]

    for i in range(length + 1):
        while deque_window and prefix_sum[i] - prefix_sum[deque_window[0]] >= k:
            min_subarray_length = min(min_subarray_length, i - deque_window.popleft())

        while deque_window and prefix_sum[i] <= prefix_sum[deque_window[-1]]:
            deque_window.pop()

        deque_window.append(i)

    return min_subarray_length if min_subarray_length != float('inf') else -1

# Test cases
nums1 = [1]
k1 = 1
print(shortestSubarrayLength(nums1, k1))  # Output: 1

nums2 = [1, 2]
k2 = 4
print(shortestSubarrayLength(nums2, k2))  # Output: -1

nums3 = [2, -1, 2]
k3 = 3
print(shortestSubarrayLength(nums3, k3))  # Output: 3
